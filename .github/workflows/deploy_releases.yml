name: Deploy Releases

# Trigger the workflow on pushes to tags matching 'v*.*.*'
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Replace BUILD_VERSION with tag
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0)
          echo "Using tag: $TAG_NAME"
          sed -i "s/BUILD_VERSION/$TAG_NAME/g" Digifiz/main/data/digifiz_ws_connect.html
          sed -i "s/BUILD_VERSION/$TAG_NAME/g" A2560_BoardR2/Digifiz/protocol.cpp
    # --- Arduino Build ---
      # --- Install Arduino CLI ---
      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "$HOME/bin" >> $GITHUB_PATH  # Add Arduino CLI to PATH
          echo "/home/runner/work/DigifizReplica/DigifizReplica/bin" >> $GITHUB_PATH  # Add Arduino CLI to PATH
          echo "/home/runner/work/DigifizReplica/bin" >> $GITHUB_PATH  # Add Arduino CLI to PATH
      # --- Verify Arduino CLI Installation ---
      - name: Check Arduino CLI Version
        run: arduino-cli version
      # --- Install Arduino AVR Core ---
      - name: Install Arduino AVR Core
        run: |
          arduino-cli core update-index
          arduino-cli core install arduino:avr
      # --- Configure Arduino CLI ---
      - name: Create Arduino CLI Configuration
        run: |
          mkdir -p ~/.arduino15
          cat <<EOF > ~/.arduino15/arduino-cli.yaml
          board_manager:
            additional_urls: []
          daemon:
            port: "50051"
          logging:
            file: ""
            format: text
            level: info
          metrics:
            addr: ""
            enabled: false
          sketchbook_path: "$HOME/Arduino"
          allow_unsafe_install: true  # Enable --git-url and --zip-path
          EOF
      # --- Backup Original setup.h ---
      - name: Backup Original setup.h
        run: mv A2560_BoardR2/Digifiz/setup.h A2560_BoardR2/Digifiz/setup.h.orig

      # --- Define Variants ---
      - name: Set Variant List
        run: echo "VARIANTS=setup_audi_red setup_audi_green setup_g2 setup_g2_uk setup_g2_usa setup_g2_diesel" >> $GITHUB_ENV

      # --- Install Dependencies (Arduino Libraries) ---
      - name: Install Required Arduino Libraries
        run: |
          arduino-cli lib install "RTCLib"
          arduino-cli lib install "MedianFilterLib2"
          arduino-cli lib install "SparkFun External EEPROM Arduino Library"
          arduino-cli lib install "Adafruit BusIO"

      # --- Loop and Build Each Variant ---
      - name: Compile All Variants
        run: |
          for VARIANT in $VARIANTS; do
            echo "Building $VARIANT..."
            cp A2560_BoardR2/Digifiz/${VARIANT}.h A2560_BoardR2/Digifiz/setup.h
            arduino-cli compile --fqbn arduino:avr:mega A2560_BoardR2/Digifiz/ --output-dir build/$VARIANT
          done

      # --- Upload All Arduino Variants as Artifacts ---
      - name: Collect Arduino Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: digifiz-firmware
          path: build/
          compression-level: 0  # Adjust for speed vs. size (0 = fastest, 9 = smallest)
          if-no-files-found: error  # Fails if no firmware is generated
     # --- Zip All Artifacts ---
      - name: Zip All Artifacts
        run: |
          # Create a zip file of all the artifacts in the build directory
          zip -r build/digifiz-firmware.zip build/*
          
      # --- ESP-IDF Build ---
      - name: Set up ESP-IDF and Build
        uses: espressif/esp-idf-ci-action@v1.1.0
        with:
          esp_idf_version: v5.2.1
          target: esp32s3
          path: 'ESP32/Digifiz/'

      - name: Collect Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          compression-level: 0  # Adjust for speed vs. size (0 = fastest, 9 = smallest)
          if-no-files-found: error  # Fails if no firmware is generated
          path: |
            ESP32/Digifiz/build/*.bin
            ESP32/Digifiz/build/bootloader/*.bin
            ESP32/Digifiz/build/partition_table/*.bin
            ESP32/Digifiz/build/*.elf
            
     
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automated release for `${{ github.ref }}`.
          draft: false
          prerelease: false

      - name: Upload Firmware to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ESP32/Digifiz/build/Digifiz.bin
          asset_name: Digifiz.bin
          asset_content_type: application/octet-stream
      
      - name: Upload Bootloader to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ESP32/Digifiz/build/bootloader/bootloader.bin
          asset_name: bootloader.bin
          asset_content_type: application/octet-stream
      
      - name: Upload Partition Table to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ESP32/Digifiz/build/partition_table/partition-table.bin
          asset_name: partition_table.bin
          asset_content_type: application/octet-stream
      
      - name: Upload OTA Initial to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ESP32/Digifiz/build/ota_data_initial.bin
          asset_name: ota_data_initial.bin
          asset_content_type: application/octet-stream
      
      - name: Upload ELF to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ESP32/Digifiz/build/Digifiz.elf
          asset_name: Digifiz.elf
          asset_content_type: application/octet-stream
      
      # --- Upload Arduino Firmware to Release ---
      - name: Upload Arduino Firmware to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/digifiz-firmware.zip  # Path to the zip file
          asset_name: digifiz-firmware.zip  # Name of the zip file
          asset_content_type: application/octet-stream
